apiVersion: v1
kind: Namespace
metadata:
  name: egs-touristguide

####################################### AMAZONS3 #######################################
--- # Amazons3 deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: amazons3-service
  namespace: egs-touristguide
spec:
  replicas: 1
  selector:
    matchLabels:
      app: amazons3-service
  template:
    metadata:
      labels:
        app: amazons3-service
    spec:
      containers:
      - name: amazons3-service
        image: registry.deti/egs-touristguide/amazons3:v5
        ports:
        - containerPort: 5000

--- # Amazons3 service
apiVersion: v1
kind: Service
metadata:
  name: amazons3-app-service
  namespace: egs-touristguide
spec:
  ports:
  - port: 81
    targetPort: 5000
  selector:
    app: amazons3-service
  type: LoadBalancer


####################################### MONGO - EVENT #######################################
--- # Mongo-event persistent volume claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name:  mongo-event
  namespace: egs-touristguide
spec:
  storageClassName: longhorn
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

--- # Mongo-event deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-event
  namespace: egs-touristguide
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-event
  template:
    metadata:
      labels:
        app: mongo-event
    spec:
      containers:
        - name: mongo-event
          image: mongo
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-event
              mountPath: /var/lib/mongodb
            - name: init-db-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mongo-event
          persistentVolumeClaim:
            claimName: mongo-event
        - name: init-db-script
          configMap:
            name: mongo-event-init

--- # Mongo-event service
apiVersion: v1
kind: Service
metadata:
  name: event-mongo-service
  namespace: egs-touristguide
spec:
  selector:
    app: mongo-event
  ports:
    - protocol: TCP
      port: 27018
      targetPort: 27017

####################################### EVENT #######################################
--- # Event configMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: event-service-config
  namespace: egs-touristguide
data:
  API_NAME: 'Event_Service'
  API_PORT: '1000'
  API_SECRET: 'Aq@Z%&6h9vRU/9Z5Oy!3z6`X0^M.kv'
  DATABASE_NAME: 'Event_Service'
  DATABASE_URI: 'mongodb://event-mongo-service:27018/Event_Service'
  AMAZONS3_SERVICE_ACCESS_KEY_ID: 'ft}+[2b~yRqVvL%9J$B%)^c!f8MF~Y'
  AMAZONS3_SERVICE_SECRET_ACCESS_KEY: 'f+jQ9_lY(5=AR|UBPCU&E?$Xz|zeC*'
  AMAZONS3_SERVICE_REGION: 'eu-west-1'
  AMAZONS3_SERVICE_BUCKET: 'Event_Service'
  AMAZONS3_SERVICE_URL: 'http://amazons3-app-service:81'
  CALENDAR_SERVICE_KEY: '7d4d3351-64b9-4d0a-918c-419828a941d3'
  CALENDAR_SERVICE_URL: 'http://calendar-app-service'
  CALENDAR_SERVICE_PORT: '84'
  POI_SERVICE_KEY: 'Tigas:4712b0a1d771938c04e5cba078b0a889'
  POI_SERVICE_URL: 'http://poi-app-service'
  POI_SERVICE_PORT: '83'

--- # Event deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: event-service
  namespace: egs-touristguide
spec:
  replicas: 1
  selector:
    matchLabels:
      app: event-service
  template:
    metadata:
      labels:
        app: event-service
    spec:
      containers:
      - name: event-service
        image: registry.deti/egs-touristguide/event:v16
        ports:
        - containerPort: 1000
        envFrom:
          - configMapRef:
              name: event-service-config

--- # Event service
apiVersion: v1
kind: Service
metadata:
  name: event-app-service
  namespace: egs-touristguide
spec:
  selector:
    app: event-service
  ports:
    - protocol: TCP
      port: 82
      targetPort: 1000
  type: LoadBalancer

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data
  namespace: egs-touristguide
spec:
  storageClassName: longhorn
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: egs-touristguide
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongodb-data
              mountPath: /var/lib/mongodb
            - name: init-db-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-data
        - name: init-db-script
          configMap:
            name: mongo-db-init

---
apiVersion: v1
kind: Service
metadata:
  name: poi-mongodb-service
  namespace: egs-touristguide
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: poi-app
  namespace: egs-touristguide
spec:
  replicas: 1
  selector:
    matchLabels:
      app: poi-app
  template:
    metadata:
      labels:
        app: poi-app
    spec:
      containers:
        - name: poi-app
          image: registry.deti/egs-touristguide/poi:v3
          env:
            - name: MONGODB_URI
              value: "mongodb://poi-mongodb-service:27017/poi-database"
            - name: DB_NAME
              value: "poi_database"
            - name: COLLECTION_NAME
              value: "POIs"
            - name: COLLECTION_APIKEYS
              value: "apiKeys"
          ports:
            - containerPort: 4000

---
apiVersion: v1
kind: Service
metadata:
  name: poi-app-service
  namespace: egs-touristguide
spec:
  selector:
    app: poi-app
  ports:
    - protocol: TCP
      port: 83
      targetPort: 4000
  type: LoadBalancer


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim4
  namespace: egs-touristguide
spec:
  storageClassName: longhorn
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: egs-touristguide
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          args:
            - "--ignore-db-dir=lost+found"
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "password"
            - name: MYSQL_DATABASE
              value: "storeDB"
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
            - name: init-db-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim4
        - name: init-db-script
          configMap:
            name: mysql-init-db

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: egs-touristguide
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: calendar-app
  namespace: egs-touristguide
spec:
  replicas: 1
  selector:
    matchLabels:
      app: calendar-app
  template:
    metadata:
      labels:
        app: calendar-app
    spec:
      containers:
        - name: calendar-app
          image: registry.deti/egs-touristguide/calendar:v25
          env:
            - name: DB_HOST
              value: "mysql-service"
            - name: DB_USER
              value: "root"
            - name: DB_PASSWORD
              value: "password"
            - name: DB_DATABASE
              value: "storeDB"
            - name: GOOGLE_CLIENT_ID
              value: "1097079419283-psuc88td31d76u10689a97tlofj6drsk.apps.googleusercontent.com"
            - name: GOOGLE_CLIENT_SECRET
              value: "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"
            - name: CALLBACK_URL
              value: "https://www.touristguide.work.gd/oauth2callback"
          ports:
            - containerPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: calendar-app-service
  namespace: egs-touristguide
spec:
  selector:
    app: calendar-app
  ports:
    - protocol: TCP
      port: 84
      targetPort: 3000
  type: LoadBalancer

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: touristguide-k3s
  namespace: egs-touristguide
  annotations:
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  rules:
  - host: grupo4-egs-deti.ua.pt
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: nginx-service
              port:
                number: 80


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: egs-touristguide
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
    }

    http {
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        upstream calendar_app {
            server calendar-app-service:84;
        }
        upstream poi_app {
            server poi-app-service:83;
        }
        upstream event_app {
            server event-app-service:82;
        }
        upstream amazons3_app {
            server amazons3-app-service:81;
        }

        server {
            listen 80 default_server;
            server_name grupo4-egs-deti.ua.pt;

            location /api-docs {
                proxy_pass http://calendar_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /s1 {
                proxy_pass http://amazons3_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /e1 {
                proxy_pass http://event_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
  
            location /login {
                proxy_pass http://calendar_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /generate-api-key {
                proxy_pass http://calendar_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /retrieve-api-key {
                proxy_pass http://calendar_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /calendars {
                proxy_pass http://calendar_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /graphql {
                proxy_pass http://poi_app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: egs-touristguide
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: egs-touristguide
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      